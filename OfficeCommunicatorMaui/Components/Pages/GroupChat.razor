@inject ContactApiService ContactApiService
@inject ChatApiService ChatApiService


<div class="chat-container">
	<div style="display: flex; justify-content: space-between; align-items: center;">
		<h1 style="margin: 0;">@Group.Name</h1>
		<div>
			@if (Group.Admins.Any(a => a.Id == UserId))
			{
				<img src="images/add-user.png" @onclick="() => OpenAddingUsers()" class="img-icons-action" />
			}
			<img src="images/chat.png" @onclick="() => OpenChat()" class="img-icons-action" />
			<img src="images/list.png" @onclick="() => OpenListMemebers()" class="img-icons-action" />
			<img src="images/phone-call.png" @onclick="() => CallGroup()" class="img-icons-action" />
			<img src="images/exit.png" @onclick="() => OnLeaveGroup.InvokeAsync()" class="img-icons-action" />
		</div>
	</div>


	@if (isOpenedChat)
	{
		<div class="messages-container">
			@foreach (var message in Group.Chat.Messages)
			{
				<div class="message-wrapper @(message.UserId == UserId ? "my-message" : "other-message")">
					<div style="display: flex">
						@if (message.UserId == UserId)
						{
							<img src="images/delete.png" class="image-action" @onclick="() => DeleteMessage(message.Id)" />
							<img src="images/pencil.png" class="image-action" @onclick="() => ActivateUpdateMessage(message.Id)" />
						}
						<div class="message-content">
							<p>@message.Content</p>
							@foreach (var file in message.Documents)
							{
								<div style="display: flex; align-items: center;">
									<p class="file-link" @onclick="() => DownloadFile(file.Id, file.MessageId, file.Name)" style="padding-right: 10px;">
										@file.Name
									</p>
									@if (message.UserId == UserId)
									{
										<img src="images/delete.png" class="image-action" @onclick="() => DeleteDocument(file.Id, message.Id)" />

									}
								</div>
							}
						</div>
					</div>
				</div>
			}
		</div>


		<div class="input-container">
			<textarea type="text" @bind="content" class="message-input" placeholder="Type your message..." />
			@if (isUpdating)
			{
				<button class="send-button" @onclick="() => UpdateMessage()">Update</button>
				<button class="send-button" @onclick="() => CancelUpdating()">Cancel</button>

			}
			else
			{
				<button class="send-button" @onclick="SendMessage">Send</button>
				<div class="file-inputs">
					@for (int i = 0; i < countInputsFiles; i++)
					{
						<InputFile @key="i" OnChange="HandleFileSelection" style="@GetInputFileStyle(i)" multiple></InputFile>
					}
				</div>
			}
		</div>
	}



	@if (isAddingUsers)
	{
		<div class="add-user">
			<h3>Add user to chat</h3>
			<div class="contact-list">
				<input type="text" placeholder="Enter email or unique name" class="search-bar" @bind="SearchText" />

				@foreach (var user in FilteredUserContactsUnadded)
				{
					<div class="list-item">
						<img src="images/contact.png" alt="Contact Image" class="contact-image" />
						<div class="contact-details">
							<div class="contact-name">@user.Name</div>
							<div class="contact-unique">@user.UniqueName</div>
							<div class="contact-email">@user.Email</div>
						</div>
						<button class="add-button" @onclick="() => AddUser(user.Id)">Add</button>
					</div>
				}
			</div>
		</div>
	}


	@if (isListMembers)
	{
		<div class="add-user">
			<h3>Chat members</h3>
			<div class="contact-list">
				@foreach (var user in Group.Users)
				{
					<div class="list-item">
						<img src="images/contact.png" alt="Contact Image" class="contact-image" />
						<div class="contact-details">
							<div class="contact-name">@user.Name</div>
							<div class="contact-unique">@user.UniqueName</div>
							<div class="contact-email">@user.Email</div>
							<div>@(Group.Admins.Any(a => a.Id == user.Id) ? "ADMIN" : "USER")</div>
						</div>
						@if (Group.Admins.Any(a => a.Id == UserId) && !Group.Admins.Any(a => a.Id == user.Id))
						{
							<button class="add-button" @onclick="() => AddAdmin(user.Id)">Make admin</button>
							<button class="add-button" @onclick="() => RemoveUserFromGroup(user.Id)">Remove</button>
						}
					</div>
				}
			</div>
		</div>
	}
</div>





@code {

	[Parameter]
	public Group Group { get; set; }

	[Parameter]
	public int UserId { get; set; }

	[Parameter]
	public List<Contact> Contacts { get; set; }

	[Parameter]
	public EventCallback<MessageStorageDto> OnSendMessage { get; set; }

	[Parameter]
	public EventCallback OnLeaveGroup { get; set; }

	[Parameter]
	public EventCallback<int> OnRemoveUserFromGroup { get; set; }

	[Parameter]
	public EventCallback<DownloadFileRequestDto> OnDownloadFile { get; set; }

	[Parameter]
	public EventCallback<int> OnCallGroup { get; set; }

	[Parameter]
	public EventCallback<MessageStorageDto> OnUpdateMessage { get; set; }

	[Parameter]
	public EventCallback<DocumentMessageChatId> OnDeleteMessage { get; set; }

	[Parameter]
	public EventCallback<DocumentMessageChatId> OnDeleteDocument { get; set; }

	[Parameter]
	public EventCallback<int> OnAddUser { get; set; }

	[Parameter]
	public EventCallback<int> OnAddAdmin { get; set; }

	private List<User> userContactsUnadded { get; set; }
	public List<User> FilteredUserContactsUnadded { get; set; }
	private string _searchText;
	public string SearchText
	{
		get => _searchText;
		set
		{
			if (_searchText != value)
			{
				_searchText = value;
				Search();
			}
		}
	}

	private string content { get; set; } = string.Empty;
	private int countInputsFiles { get; set; } = 1;
	private bool isAddingUsers { get; set; }
	private bool isListMembers { get; set; }
	private bool isOpenedChat { get; set; }
	private bool isUpdating { get; set; }
	private int updatingMessageId { get; set; } = 0;

	private List<IBrowserFile> SelectedFiles { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		OpenChat();
	}

	protected override async Task OnParametersSetAsync()
	{
		Group.Chat.Messages = Group.Chat.Messages.OrderBy(m => m.Date).ToList();

		userContactsUnadded = Contacts.Select(c => c.AssociatedUser).ToList();
		userContactsUnadded = userContactsUnadded.Where(u => !Group.Users.Any(gu => gu.Id == u.Id)).ToList();
		FilteredUserContactsUnadded = userContactsUnadded;
	}


	private async Task SendMessage()
	{
		if (string.IsNullOrEmpty(content) && SelectedFiles.Count() == 0) return;

		List<Document> documents = new();
		foreach (var file in SelectedFiles)
		{
			documents.Add(new Document()
				{
					Name = file.Name,
					UniqueIdentifier = string.Empty

				});
		}
		Group.Chat.Messages.Add(new Message()
			{
				Content = content,
				UserId = UserId,
				ChatId = Group.ChatId,
				Date = DateTime.Now,
				Documents = documents
			});
		await OnSendMessage.InvokeAsync(new MessageStorageDto(UserId, nameof(Group), Group.ChatId, content, SelectedFiles));

		content = string.Empty;
	}


	public async Task RemoveUserFromGroup(int userId)
	{
		User? user = Group.Users.FirstOrDefault(u => u.Id == userId);
		if (user == null) return;
		Group.Users.Remove(user);
		userContactsUnadded.Add(user);
		await OnRemoveUserFromGroup.InvokeAsync(userId);
	}


	private async Task DownloadFile(int fileId, int messageId, string fileName)
	{
		if (fileId > 0) await OnDownloadFile.InvokeAsync(new DownloadFileRequestDto(fileId, messageId, fileName));
	}


	private string GetInputFileStyle(int index)
	{
		return index == countInputsFiles - 1 ? "" : "display: none";
	}


	private void HandleFileSelection(InputFileChangeEventArgs e)
	{
		countInputsFiles++;
		var files = e.GetMultipleFiles().ToList();
		foreach (var file in files)
		{
			if (SelectedFiles.Any(f => f.Name == file.Name)) SelectedFiles.RemoveAll(f => f.Name == file.Name);
			SelectedFiles.Add(file);
		}
	}


	private async Task AddUser(int userId)
	{
		User? user = userContactsUnadded.FirstOrDefault(u => u.Id == userId);
		if (user == null) return;
		Group.Users.Add(user);
		userContactsUnadded.RemoveAll(u => u.Id == userId);
		await OnAddUser.InvokeAsync(userId);
	}


	public async Task AddAdmin(int userId)
	{
		if (Group.Admins.Any(a => a.Id == userId)) return;
		User? user = Group.Users.FirstOrDefault(u => u.Id == userId);
		if (user == null) return;
		Group.Admins.Add(user);
		await OnAddAdmin.InvokeAsync(userId);
	}


	private async Task CallGroup()
	{
		await OnCallGroup.InvokeAsync(Group.ChatId);
	}


	private async Task UpdateMessage()
	{
		Message? message = Group.Chat.Messages.FirstOrDefault(m => m.Id == updatingMessageId);
		if (message != null)
		{
			await OnUpdateMessage.InvokeAsync(new MessageStorageDto() { Content = content, ChatId = Group.ChatId, Id = updatingMessageId, UserId = UserId });

			Group.Chat.Messages.Remove(message);
			message.Content = content;
			Group.Chat.Messages.Add(message);
			Group.Chat.Messages = Group.Chat.Messages.OrderBy(m => m.Date).ToList();
		}

		content = string.Empty;
		updatingMessageId = 0;
		isUpdating = false;

		await InvokeAsync(StateHasChanged);
	}

	private async Task DeleteMessage(int messageId)
	{
		Message? message = Group.Chat.Messages.FirstOrDefault(m => m.Id == messageId);
		if (message == null) return;
		Group.Chat.Messages.Remove(message);
		await OnDeleteMessage.InvokeAsync(new DocumentMessageChatId(0, messageId, Group.ChatId));

	}

	private async Task DeleteDocument(int documentId, int messageId)
	{

		var message = Group.Chat.Messages.FirstOrDefault(m => m.Documents.Any(d => d.Id == documentId));
		if (message == null) return;
		var document = message.Documents.FirstOrDefault(d => d.Id == documentId);
		if (document == null) return;

		if (message.Documents.Count() == 1) await DeleteMessage(messageId);
		else
		{
			await OnDeleteDocument.InvokeAsync(new DocumentMessageChatId(documentId, messageId, Group.ChatId));
			message.Documents.Remove(document);

			await InvokeAsync(StateHasChanged);
		}
	}


	private async Task ActivateUpdateMessage(int messageId)
	{
		Message? message = Group.Chat.Messages.FirstOrDefault(m => m.Id == messageId);
		if (message == null) return;
		content = message.Content;
		updatingMessageId = messageId;
		isUpdating = true;
		await InvokeAsync(StateHasChanged);
	}

	private async Task CancelUpdating()
	{
		content = string.Empty;
		updatingMessageId = 0;
		isUpdating = false;
		await InvokeAsync(StateHasChanged);
	}

	private void OpenChat()
	{
		isAddingUsers = false;
		isListMembers = false;
		isOpenedChat = true;
	}

	private void OpenListMemebers()
	{
		isAddingUsers = false;
		isListMembers = true;
		isOpenedChat = false;
	}

	private void OpenAddingUsers()
	{
		isAddingUsers = true;
		isListMembers = false;
		isOpenedChat = false;
	}


	private void Search()
	{
		FilteredUserContactsUnadded = userContactsUnadded.Where(u => u.UniqueName.Contains(_searchText) || u.Email.Contains(_searchText)).ToList();
	}
}
