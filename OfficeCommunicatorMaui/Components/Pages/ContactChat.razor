@inject ContactApiService ContactApiService
@inject ChatApiService ChatApiService
@inject IJSRuntime JSRuntime


<div class="chat-container">
	<div style="display: flex; justify-content: space-between; align-items: center;">
		<h1 style="margin: 0;">@Contact.AssociatedUser.Name</h1>
		<div>
			<img src="images/phone-call.png" @onclick="() => CallUser()" style="max-width: 40px; max-height: 40px; cursor: pointer; margin-left: 10px;" />
			<img src="images/exit.png" @onclick="() => OnRemoveContact.InvokeAsync()" style="max-width: 40px; max-height: 40px; cursor: pointer; margin-left: 10px;" />
		</div>
	</div>

	<div class="messages-container" @ref="MessagesContainer">
		@foreach (var message in Contact.Chat.Messages)
		{
			<div  class="message-wrapper @(message.UserId == UserId ? "my-message" : "other-message")">
				<div style="display: flex">
					@if (message.UserId == UserId)
					{
						<img src="images/delete.png" class="image-action" @onclick="() => DeleteMessage(message.Id)"/>
						<img src="images/pencil.png" class="image-action" @onclick="() => ActivateUpdateMessage(message.Id)" />
					}
					<div class="message-content">
						<p>@message.Content</p>
						@foreach (var file in message.Documents)
						{
							<div style="display: flex; align-items: center;">
								<p class="file-link" @onclick="() => DownloadFile(file.Id, file.MessageId, file.Name)" style="padding-right: 10px;">
									@file.Name
								</p>
								@if(message.UserId == UserId)
								{
									<img src="images/delete.png" class="image-action" @onclick="() => DeleteDocument(file.Id, message.Id)" />

								}
							</div>
						}
					</div>
				</div>
			<div>@message.Date.ToString("HH:mm")</div>
			</div>
		}
	</div>

	<div class="input-container">
		<textarea type="text" @bind="content" class="message-input" placeholder="Type your message..." />
		@if (isUpdating)
		{
			<button class="send-button" @onclick="() => UpdateMessage()">Update</button>
			<button class="send-button" @onclick="() => CancelUpdating()">Cancel</button>

		}
		else
		{
			<button class="send-button" @onclick="SendMessage">Send</button>
			<div class="file-inputs">
				@for (int i = 0; i < countInputsFiles; i++)
				{
					<InputFile @key="i" OnChange="HandleFileSelection" style="@GetInputFileStyle(i)" multiple></InputFile>
				}
			</div>
		}
	</div>
	@foreach (var documnt in SelectedFiles)
	{
		<div style="display: flex; text-align: center">
			<div>@documnt.Name</div>
			<img src="images/delete.png" class="image-action" @onclick="() => SelectedFiles.Remove(documnt)" />
		</div>
	}
</div>

@code {
	[Parameter]
	public Contact Contact { get; set; }

	[Parameter]
	public int UserId { get; set; }

	[Parameter]
	public EventCallback<MessageStorageModel> OnSendMessage { get; set; }

	[Parameter]
	public EventCallback OnRemoveContact { get; set; }

	[Parameter]
	public EventCallback<DownloadFileRequestDto> OnDownloadFile { get; set; }

	[Parameter]
	public EventCallback<MessageStorageModel> OnUpdateMessage { get; set; }

	[Parameter]
	public EventCallback<DocumentMessageChatId> OnDeleteMessage { get; set; }

	[Parameter]
	public EventCallback<DocumentMessageChatId> OnDeleteDocument { get; set; }

	[Parameter]
	public EventCallback<int> OnCallUser { get; set; }

	private ElementReference MessagesContainer;

	private string content { get; set; } = string.Empty;
	private int countInputsFiles { get; set; } = 1;
	private bool isUpdating { get; set; } = false;
	private int updatingMessageId { get; set; } = 0;

	private List<IBrowserFile> SelectedFiles { get; set; } = new();


	protected override async Task OnInitializedAsync()
	{
		Contact.Chat.Messages = Contact.Chat.Messages.OrderBy(m => m.Date).ToList();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await ScrollToBottom();
		}
	}

	private async Task ScrollToBottom()
	{
		await JSRuntime.InvokeVoidAsync("scrollToBottom", MessagesContainer);
	}

	private string GetInputFileStyle(int index)
	{
		return index == countInputsFiles - 1 ? "" : "display: none";
	}

	private async Task SendMessage()
	{
		if (string.IsNullOrEmpty(content) && SelectedFiles.Count() == 0) return;
		List<Document> documents = new();
		foreach (var file in SelectedFiles)
		{
			documents.Add(new Document()
				{
					Name = file.Name,
					UniqueIdentifier = string.Empty

				});
		}
		string uniqueIdentifier = Guid.NewGuid().ToString();

		Contact.Chat.Messages.Add(new Message()
		{
			Content = content,
			UserId = UserId,
			ChatId = Contact.ChatId,
			Date = DateTime.Now,
			UniqueIdentifier = uniqueIdentifier,
			Documents = documents
		});
		string copyContent = content;
		content = string.Empty;
		await OnSendMessage.InvokeAsync(new MessageStorageModel(UserId, uniqueIdentifier, Contact.ChatId, copyContent, nameof(Contact), SelectedFiles));
		SelectedFiles.Clear();
	}

	private async Task DownloadFile(int fileId, int messageId, string fileName)
	{
		if(fileId > 0) await OnDownloadFile.InvokeAsync(new DownloadFileRequestDto(fileId, messageId, fileName));
	}

	private void HandleFileSelection(InputFileChangeEventArgs e)
	{
		countInputsFiles++;
		var files = e.GetMultipleFiles().ToList();
		foreach (var file in files)
		{
			if (SelectedFiles.Any(f => f.Name == file.Name)) SelectedFiles.RemoveAll(f => f.Name == file.Name);
			SelectedFiles.Add(file);
		}
	}

	private async Task CallUser()
	{
		await OnCallUser.InvokeAsync(Contact.AssociatedUserId);
	}

	private async Task UpdateMessage()
	{
		Message? message = Contact.Chat.Messages.FirstOrDefault(m => m.Id == updatingMessageId);
		if (message != null)
		{
			await OnUpdateMessage.InvokeAsync(new MessageStorageModel() 
			{ 
				Content = content, 
				ChatId = Contact.ChatId, 
				Id = updatingMessageId, 
				UserId = UserId, 
				UniqueIdentifier = message.UniqueIdentifier,
				CommunicationType = nameof(Contact)
			});

			Contact.Chat.Messages.Remove(message);
			message.Content = content;
			Contact.Chat.Messages.Add(message);
			Contact.Chat.Messages = Contact.Chat.Messages.OrderBy(m => m.Date).ToList();
		}

		content = string.Empty;
		updatingMessageId = 0;
		isUpdating = false;

		await InvokeAsync(StateHasChanged);
	}

	private async Task DeleteMessage(int messageId)
	{
		Message? message = Contact.Chat.Messages.FirstOrDefault(m => m.Id == messageId);
		if (message == null) return;
		Contact.Chat.Messages.Remove(message);
		await OnDeleteMessage.InvokeAsync(new DocumentMessageChatId(0, messageId, Contact.ChatId, message.UniqueIdentifier));

	}

	private async Task DeleteDocument(int documentId, int messageId)
	{
		var message = Contact.Chat.Messages.FirstOrDefault(m => m.Documents.Any(d => d.Id == documentId));
		if (message == null) return;
		var document = message.Documents.FirstOrDefault(d => d.Id == documentId);
		if (document == null) return;

		if (message.Documents.Count() == 1 && string.IsNullOrEmpty(message.Content)) await DeleteMessage(messageId);
		else
		{
			await OnDeleteDocument.InvokeAsync(new DocumentMessageChatId(documentId, messageId, Contact.ChatId));
			message.Documents.Remove(document);
			await InvokeAsync(StateHasChanged);
		}
	}


	private async Task ActivateUpdateMessage(int messageId)
	{
		content = Contact.Chat.Messages.FirstOrDefault(m => m.Id == messageId).Content;
		updatingMessageId = messageId;
		isUpdating = true;
		await InvokeAsync(StateHasChanged);
	}

	private async Task CancelUpdating()
	{
		content = string.Empty;
		updatingMessageId = 0;
		isUpdating = false;
		await InvokeAsync(StateHasChanged);
	}
}
