@inject ContactApiService ContactApiService
@inject ChatApiService ChatApiService

<h1>@Contact.AssociatedUser.Name</h1>

@foreach(var message in Contact.Chat.Messages)
{
	<h4>@message.Content</h4>
	@foreach (var file in message.Documents)
	{
		<h3 style="cursor: pointer" @onclick="() => DownloadFile(file.Id, file.MessageId, file.Name)">@file.Name</h3>

	}
}

<input type="text" @bind="Message" />
<button @onclick="SendMessage">Send</button>

<InputFile @key=@(inputFileKey) OnChange="HandleFileSelection" multiple />

@code {
	[Parameter]
	public Contact Contact { get; set; }

	[Parameter]
	public int UserId { get; set; }

	[Parameter]
	public EventCallback<MessageStorageDto> OnSendMessage { get; set; }

	[Parameter]
	public EventCallback<DownloadFileRequestDto> OnDownloadFile { get; set; }

	private string Message { get; set; } = string.Empty;
	private string inputFileKey { get; set; } = Guid.NewGuid().ToString();

	private List<IBrowserFile> SelectedFiles { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		Contact.Chat.Messages = Contact.Chat.Messages.OrderBy(m => m.Date).ToList();
	}

	private async Task SendMessage()
	{
		List<Document> documents = new();
		foreach (var file in SelectedFiles)
		{
			documents.Add(new Document()
				{
					Name = file.Name,
					UniqueIdentifier = string.Empty

				});
		}
		Contact.Chat.Messages.Add(new Message()
		{
			Content = Message,
			UserId = UserId,
			ChatId = Contact.ChatId,
			Date = DateTime.Now,
			Documents = documents
		});
		SelectedFiles.Clear();
		await OnSendMessage.InvokeAsync(new MessageStorageDto(UserId, nameof(Contact), Contact.ChatId, Message, SelectedFiles));
		Message = string.Empty;
	}

	private async Task DownloadFile(int fileId, int messageId, string fileName)
	{
		if(fileId > 0) await OnDownloadFile.InvokeAsync(new DownloadFileRequestDto(fileId, messageId, fileName));
	}

	private void HandleFileSelection(InputFileChangeEventArgs e)
	{
		var files = e.GetMultipleFiles().ToList();
		foreach (var file in files)
		{
			if (SelectedFiles.Any(f => f.Name == file.Name)) SelectedFiles.RemoveAll(f => f.Name == file.Name);
			SelectedFiles.Add(file);
		}
		inputFileKey = Guid.NewGuid().ToString();
	}
}
