@using System.Collections.Concurrent
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject AuthApiService AuthApiService
@inject ChatApiService ChatApiService
@inject MessageRepository MessageRepository

<header class="bg-dark text-white" style="font-size: 1.25rem; font-weight: 600; padding: 1rem 0;">
    <div class="container-fluid">
        <div class="d-flex flex-wrap align-items-center justify-content-between">
            <a href="/" class="d-flex align-items-center text-white text-decoration-none">
                <svg class="bi me-2" width="40" height="32" role="img" aria-label="Bootstrap"><use xlink:href="#bootstrap" /></svg>
            </a>

            <ul class="nav me-auto">
                <li><a href="#" class="nav-link px-2 text-secondary">Home</a></li>
                <li><a href="#" class="nav-link px-2 text-white">Features</a></li>
                <li><a href="#" class="nav-link px-2 text-white">Pricing</a></li>
                <li><a href="#" class="nav-link px-2 text-white">FAQs</a></li>
                <li><a href="#" class="nav-link px-2 text-white">About</a></li>
            </ul>

            <form class="d-flex me-3">
                <input type="search" class="form-control form-control-dark" placeholder="Search..." aria-label="Search">
            </form>

            <div class="text-end">
                <button type="button" class="btn btn-outline-light me-2" @onclick="OnLogout">Logout</button>
                <button type="button" class="btn btn-warning">Sign-up</button>
            </div>
        </div>
    </div>
</header>


<div class="page">
    @if(user != null)
    {
        <div class="sidebar">
            <NavMenu Groups="user.Groups" Contacts="user.Contacts" OnGroupSelected="HandleGroupSelected" OnContactSelected="HandleContactSelected" />
        </div>

        <main>
            <article class="content px-4">
                @if (isChatOpened)
                {
                    @if (isGroupOpened)
                    {
                        <GroupChat Group="selectedGroup" OnSendMessage="SendMessageGroup" UserId="user.Id" />
                    }
                    @if (!isGroupOpened)
                    {
                        <ContactChat Contact="selectedContact" OnSendMessage="SendMessageContact" UserId="user.Id" />
                    }
                }
            </article>
        </main>
    }
</div>

@code {
    [Parameter]
    public EventCallback OnLogout { get; set; }

    private bool isChatOpened { get; set; }
    private bool isGroupOpened { get; set; }

    private int selectedGroupId { get; set; }
    private int selectedContactId { get; set; }

    private Group? selectedGroup { get; set; }
    private Contact? selectedContact { get; set; }
     
    private readonly string serverUrl = "http://localhost:5207/chatHub";

    private User? user { get; set; }
    private HubConnection hubConnection { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string? token = await SecureStorageService.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            await OnLogout.InvokeAsync();
            return;
        }

        user = await AuthApiService.GetUserAsync(token);
        if (user == null)
        {
            await OnLogout.InvokeAsync();
            return;
        }


        hubConnection = new HubConnectionBuilder()
            .WithUrl(serverUrl, options =>
            {
                options.AccessTokenProvider = () => Task.FromResult<string?>(token);
            })
        .Build();
        await hubConnection.StartAsync();

        if (hubConnection.State != HubConnectionState.Connected)
        {
            await OnLogout.InvokeAsync();
            return;
        }



		var unsavedMessages = await MessageRepository.GetUnsentMessagesAsync();
        foreach (var message in unsavedMessages)
        {
            if (message.Communication == nameof(Group) && message.UserId == user.Id) await SendMessageGroup(message);
            else if (message.Communication == nameof(Contact) && message.UserId == user.Id) await SendMessageContact(message);
        };



        hubConnection.On<Message>("ReceiveGroupMessage", async (message) =>
        {
            Console.Beep();
            if (selectedGroup != null && selectedGroup.ChatId == message.ChatId)
            {
                selectedGroup.Chat.Messages.Add(message);
                await InvokeAsync(StateHasChanged);
            }
        });


        hubConnection.On<Message>("ReceiveContactMessage", async (message) =>
        {
            Console.Beep();
            if(selectedContact != null && selectedContact.ChatId == message.ChatId)
            {
                selectedContact.Chat.Messages.Add(message);
                await InvokeAsync(StateHasChanged);
            }
        });


        hubConnection.On<Message>("RemoveMessage", async (message) =>
        {
            if(selectedContact != null && selectedContact.ChatId == message.Id)
            {
                selectedContact.Chat.Messages.Remove(message);
                await InvokeAsync(StateHasChanged);
            }
            else if (selectedGroup != null && selectedGroup.ChatId == message.Id)
            {
                selectedGroup.Chat.Messages.Remove(message);
                await InvokeAsync(StateHasChanged);
            }
        });


        hubConnection.On<Contact>("ReceiveContact", async (contact) =>
        {
            Console.Beep();
            await hubConnection.SendAsync("SubscribeContact", contact.Id);
            user.Contacts.Add(contact);
            await InvokeAsync(StateHasChanged);
        });
    }


    private async Task<Group?> GetGroup(int groupId)
    {
        string? token = await SecureStorageService.GetTokenAsync();
        if (string.IsNullOrEmpty(token)) return null;
        else return await ChatApiService.GetGroupAsync(groupId, token);
    }


    private async Task<Contact?> GetContact(int contactId)
    {
        string? token = await SecureStorageService.GetTokenAsync();
        if (string.IsNullOrEmpty(token)) return null;
        else return await ChatApiService.GetContactAsync(contactId, token);
    }



    private async Task ExitUserPage()
    {
        await hubConnection.DisposeAsync();
        await OnLogout.InvokeAsync();
    }


    private async Task HandleGroupSelected(Group group)
    {
        Console.Beep();
        selectedGroupId = group.Id;
        selectedContactId = 0;
        selectedContact = null;
        selectedGroup = await GetGroup(selectedGroupId);
        if (selectedGroup == null)
        {
            await ExitUserPage();
            return;
        }
        isGroupOpened = true;
        isChatOpened = true;
        await InvokeAsync(StateHasChanged);
    }


    private async void HandleContactSelected(Contact contact)
    {
        Console.Beep();
        selectedContactId = contact.Id;
        selectedGroupId = 0;
        selectedGroup = null;
        selectedContact = await GetContact(selectedContactId);
        if (selectedContact == null)
        {
            await ExitUserPage();
            return;
        }
        isGroupOpened = false;
        isChatOpened = true;
        await InvokeAsync(StateHasChanged);
    }




    private async Task SendMessageGroup(MessegeStorageModel messageSecretStorageModel)
    {
        if (messageSecretStorageModel.Id == 0) messageSecretStorageModel.Id = await MessageRepository.AddMessage(messageSecretStorageModel);
        if (hubConnection.State == HubConnectionState.Connected)
        {
            Message? message = await hubConnection.InvokeAsync<Message?>("SendMessageGroup", messageSecretStorageModel.ChatId, messageSecretStorageModel.Id, messageSecretStorageModel.Content);

            await MessageRepository.RemoveMessage(message != null ? message.SqliteIndex : messageSecretStorageModel.Id);

            if (message != null && selectedGroup != null && selectedGroup.ChatId == message.ChatId)
            {
                Message? updatedMessage = selectedGroup.Chat.Messages.FirstOrDefault(m => m.UserId == message.UserId && m.Content.Equals(message.Content) && m.ChatId == message.ChatId);
                if (updatedMessage != null)
                {
                    updatedMessage.Id = message.Id;
                    updatedMessage.Date = message.Date;
                    updatedMessage.Content = message.Content;
                }
                else
                {
                    selectedGroup.Chat.Messages.Add(message);
                }
                await InvokeAsync(StateHasChanged);
            }
        }
        else return;
    }




    private async Task SendMessageContact(MessegeStorageModel messageSecretStorageModel)
    {
        if (messageSecretStorageModel.Id == 0) messageSecretStorageModel.Id = await MessageRepository.AddMessage(messageSecretStorageModel);
        if (hubConnection.State == HubConnectionState.Connected)
        {
            Message message = await hubConnection.InvokeAsync<Message>("SendMessageGroup", messageSecretStorageModel.ChatId, messageSecretStorageModel.Id, messageSecretStorageModel.Content);

            await MessageRepository.RemoveMessage(message != null ? message.SqliteIndex : messageSecretStorageModel.Id);

            if (message != null &&  selectedContact != null && selectedContact.ChatId == message.ChatId)
            {
                Message? updatedMessage = selectedContact.Chat.Messages.FirstOrDefault(m => m.UserId == message.UserId && m.Content.Equals(message.Content) && m.ChatId == message.ChatId);
                if (updatedMessage != null)
                {
                    updatedMessage.Id = message.Id;
                    updatedMessage.Date = message.Date;
                    updatedMessage.Content = message.Content;
                }
                else
                {
                    selectedContact.Chat.Messages.Add(message);
                }
                await InvokeAsync(StateHasChanged);
            }
        }
        else return;  
    }



    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null) await hubConnection.DisposeAsync();
    }
}