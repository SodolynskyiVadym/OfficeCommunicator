@* @inherits LayoutComponentBase *@
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject AuthApiService AuthApiService
@inject ChatApiService ChatApiService

@* <header class="bg-dark text-white" style="font-size: 1.25rem; font-weight: 600; padding: 1rem 0;">
    <div class="container-fluid">
        <div class="d-flex flex-wrap align-items-center justify-content-between">
            <a href="/" class="d-flex align-items-center text-white text-decoration-none">
                <svg class="bi me-2" width="40" height="32" role="img" aria-label="Bootstrap"><use xlink:href="#bootstrap" /></svg>
            </a>

            <ul class="nav me-auto">
                <li><a href="#" class="nav-link px-2 text-secondary">Home</a></li>
                <li><a href="#" class="nav-link px-2 text-white">Features</a></li>
                <li><a href="#" class="nav-link px-2 text-white">Pricing</a></li>
                <li><a href="#" class="nav-link px-2 text-white">FAQs</a></li>
                <li><a href="#" class="nav-link px-2 text-white">About</a></li>
            </ul>

            <form class="d-flex me-3">
                <input type="search" class="form-control form-control-dark" placeholder="Search..." aria-label="Search">
            </form>

            <div class="text-end">
                <button type="button" class="btn btn-outline-light me-2" @onclick="OnLogout">Logout</button>
                <button type="button" class="btn btn-warning">Sign-up</button>
            </div>
        </div>
    </div>
</header> *@


<div class="page">
    @if(user != null)
    {
        <div class="sidebar">
            <NavMenu Groups="user.Groups" Contacts="user.Contacts" OnGroupSelected="HandleGroupSelected" OnContactSelected="HandleContactSelected" />
        </div>
    }


    <main>
        <article class="content px-4">
            @if (isChatOpened)
            {
                @if (isGroupOpened)
                {
                    <GroupChat Group="selectedGroup" OnSendMessage="SendMessageGroup" />
                }
                @if (!isGroupOpened)
                {
                    <ContactChat Contact="selectedContact" OnSendMessage="SendMessageContact" />
                }
            } 
        </article>
    </main>
</div>

@code {
    [Parameter]
    public EventCallback OnLogout { get; set; }


    private bool isChatOpened { get; set; }
    private bool isGroupOpened { get; set; }

    private int selectedGroupId { get; set; }
    private int selectedContactId { get; set; }

    private Group? selectedGroup { get; set; }
    private Contact? selectedContact { get; set; }

    private readonly string serverUrl = "http://localhost:5207/chatHub";

    private User? user { get; set; }
    private HubConnection hubConnection { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string? token = await TokenService.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            await OnLogout.InvokeAsync();
            return;
        }

        user = await AuthApiService.GetUserAsync(token);
        if (user == null)
        {
            await OnLogout.InvokeAsync();
            return;
        }


        hubConnection = new HubConnectionBuilder()
            .WithUrl(serverUrl, options =>
            {
                options.AccessTokenProvider = () => Task.FromResult<string?>(token);
            })
        .Build();
        await hubConnection.StartAsync();

        if (hubConnection.State != HubConnectionState.Connected)
        {
            await OnLogout.InvokeAsync();
            return;
        }

        hubConnection.On<int, int, Message>("ReveiveMessage", (communicationId, chatId, message) =>
        {
            Console.Beep();
        });
    }

    private async Task<Group?> GetGroup(int groupId)
    {
        string? token = await TokenService.GetTokenAsync();
        if (string.IsNullOrEmpty(token)) return null;
        else return await ChatApiService.GetGroupAsync(groupId, token);
    }

    private async Task<Contact?> GetContact(int contactId)
    {
        string? token = await TokenService.GetTokenAsync();
        if (string.IsNullOrEmpty(token)) return null;
        else return await ChatApiService.GetContactAsync(contactId, token);
    }



    private async Task ExitUserPage()
    {
        TokenService.RemoveToken();
        await hubConnection.DisposeAsync();
        await OnLogout.InvokeAsync();
    }


    private async Task HandleGroupSelected(Group group)
    {
        Console.Beep();
        selectedGroupId = group.Id;
        selectedGroup = await GetGroup(selectedGroupId);
        if (selectedGroup == null)
        {
            await ExitUserPage();
            return;
        }
        isGroupOpened = true;
        isChatOpened = true;
        await InvokeAsync(StateHasChanged);
    }

    private async void HandleContactSelected(Contact contact)
    {
        Console.Beep();
        selectedContactId = contact.Id;
		selectedContact = await GetContact(selectedContactId);
		if (selectedContact == null)
		{
			await ExitUserPage();
			return;
		}
        isGroupOpened = false;
        isChatOpened = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SendMessageGroup(SendMessageModel sendMessageModel)
    {
        await hubConnection.SendAsync("SendMessageGroup", sendMessageModel.ChatId, sendMessageModel.Message);
    }

    private async Task SendMessageContact(SendMessageModel sendMessageModel)
    {
        await hubConnection.SendAsync("SendMessageContact", sendMessageModel.ChatId, sendMessageModel.Message);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}