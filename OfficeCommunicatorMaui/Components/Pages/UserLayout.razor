@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject AuthApiService AuthApiService
@inject ChatApiService ChatApiService
@inject MessageRepository MessageRepository
@inject SecureStorageService SecureStorageService
@inject IJSRuntime JSRuntime

<header class="bg-dark text-white" style="font-size: 1.25rem; font-weight: 600; padding: 1rem 0;">
    <div class="container-fluid">
        <div class="d-flex flex-wrap align-items-center justify-content-between">
            <a href="/" class="d-flex align-items-center text-white text-decoration-none">
                <svg class="bi me-2" width="40" height="32" role="img" aria-label="Bootstrap"><use xlink:href="#bootstrap" /></svg>
            </a>

            <ul class="nav me-auto">
                <li><a href="#" class="nav-link px-2 text-secondary">Home</a></li>
                <li><a href="#" class="nav-link px-2 text-white">Features</a></li>
                <li><a href="#" class="nav-link px-2 text-white">Pricing</a></li>
                <li><a href="#" class="nav-link px-2 text-white">FAQs</a></li>
                <li><a href="#" class="nav-link px-2 text-white">About</a></li>
            </ul>

            <form class="d-flex me-3">
                <input type="search" class="form-control form-control-dark" placeholder="Search..." aria-label="Search">
            </form>

            <div class="text-end">
                <button type="button" class="btn btn-outline-light me-2" @onclick="OnLogout">Logout</button>
                <button type="button" class="btn btn-warning">Sign-up</button>
            </div>
        </div>
    </div>
</header>

@if (isCallingRequest)
{
    <CallRequest Call="callRequest" OnAccept="AcceptCall" OnReject="RejectCall"></CallRequest>
}
@if (isCalling)
{
    <CallingPage Call="userCall" OnCancel="CancelCall"></CallingPage>
}



<div class="page">
    @if(user != null)
    {
        <div class="sidebar">
            <NavMenu Groups="user.Groups" Contacts="user.Contacts" OnGroupSelected="HandleGroupSelected" OnContactSelected="HandleContactSelected" />
        </div>

        <main>
            <article class="content px-4">
                @if (isChatOpened)
                {
                    @if (isGroupOpened)
                    {
                        <GroupChat Group="selectedGroup" OnCallGroup="CallGroup"  OnDownloadFile="DownloadFile" OnSendMessage="SendMessage" UserId="user.Id" />
                    }
                    @if (!isGroupOpened)
                    {
                        <ContactChat Contact="selectedContact" AssociatedUserId="selectedContact.AssociatedUserId" OnCallUser="CallUser" OnDownloadFile="DownloadFile" OnSendMessage="SendMessage" UserId="user.Id" />
                    }
                }
            </article>
        </main>
    }
</div>

@code {
    [Parameter]
    public EventCallback OnLogout { get; set; }


    private bool isChatOpened { get; set; }
    private bool isGroupOpened { get; set; }
    private bool isCallingRequest { get; set; }
    private bool isCalling { get; set; }

    private int selectedGroupId { get; set; }
    private int selectedContactId { get; set; }

    private Group? selectedGroup { get; set; }
    private Contact? selectedContact { get; set; }
    private CallInfo? callRequest { get; set; }
    private CallInfo? userCall { get; set; }

    private readonly string serverUrl = "http://localhost:5207/chatHub";
    private string token { get; set; } = string.Empty;

    private User user { get; set; }
    private HubConnection hubConnection { get; set; }

    protected override async Task OnInitializedAsync()
    {
        token = await SecureStorageService.GetTokenAsync() ?? string.Empty;
        if (string.IsNullOrEmpty(token))
        {
            await OnLogout.InvokeAsync();
            return;
        }


        var userResponse = await AuthApiService.GetUserAsync(token);
        if (!userResponse.IsSuccess || userResponse.Data == null)
        {
            await OnLogout.InvokeAsync();
            return;
        }
        else user = userResponse.Data;


        hubConnection = new HubConnectionBuilder()
            .WithUrl(serverUrl, options =>
            {
                options.AccessTokenProvider = () => Task.FromResult<string?>(token);
            })
        .Build();
        await hubConnection.StartAsync();

        if (hubConnection.State != HubConnectionState.Connected)
        {
            await OnLogout.InvokeAsync();
            return;
        }



        var unsavedMessages = await MessageRepository.GetUnsentMessagesAsync();
        foreach (var message in unsavedMessages)
        {
            if (message.UserId == user.Id) await SendMessage(message);
        };



        hubConnection.On<Message>("ReceiveMessage", async (message) =>
        {
            Console.Beep();
            if (selectedGroup != null && selectedGroup.ChatId == message.ChatId)
            {
                selectedGroup.Chat.Messages.Add(message);
                await InvokeAsync(StateHasChanged);
            }
            else if (selectedContact != null && selectedContact.ChatId == message.ChatId)
            {
                selectedContact.Chat.Messages.Add(message);
                await InvokeAsync(StateHasChanged);
            }
        });


        hubConnection.On<Message>("RemoveMessage", async (message) =>
        {
            if(selectedContact != null && selectedContact.ChatId == message.Id)
            {
                selectedContact.Chat.Messages.Remove(message);
                await InvokeAsync(StateHasChanged);
            }
            else if (selectedGroup != null && selectedGroup.ChatId == message.Id)
            {
                selectedGroup.Chat.Messages.Remove(message);
                await InvokeAsync(StateHasChanged);
            }
        });


        hubConnection.On<Contact>("ReceiveContact", async (contact) =>
        {
            await hubConnection.SendAsync("SubscribeContact", contact.Id);
            user.Contacts.Add(contact);
            await InvokeAsync(StateHasChanged);
        });


        hubConnection.On<int>("ReceiveUserCall", async (userId) =>
        {
            if (isCallingRequest) return;

			Contact? contact = user.Contacts.FirstOrDefault(c => c.AssociatedUserId == userId);
			if (contact == null) return;

            callRequest = new CallInfo()
            {
				UserId = userId,
                UniqueName = contact.AssociatedUser.UniqueName,
                UserName = contact.AssociatedUser.Name
            };
            isCallingRequest = true;
            await InvokeAsync(StateHasChanged);
        });


        hubConnection.On<int, string>("ReceiveGroupCall", async (chatId, zoomUrl) =>
        {
            if (isCallingRequest) return;
            string? groupName = user.Groups.FirstOrDefault(g => g.ChatId == chatId)?.Name;
            if (string.IsNullOrEmpty(groupName)) return;

            callRequest = new CallInfo() { GroupName = groupName, ZoomUrl = zoomUrl};

            isCallingRequest = true;
            await InvokeAsync(StateHasChanged);
        });


        hubConnection.On<int>("RejectAnswer", async (userId) =>
        {
            if (callRequest != null && callRequest.UserId != userId) return;
			CloseCalling();
            await InvokeAsync(StateHasChanged);
        });


        hubConnection.On<string>("ReceiveAnswer", async (identity) =>
        {
			CloseCalling();
			await InvokeAsync(StateHasChanged);
            await Launcher.OpenAsync($"http://localhost:8080?callerUserId={identity}&token={user.AzureToken}");
        });


        hubConnection.On<int>("OnCancelCall", async (userId) =>
        {
            if (callRequest != null && userId == callRequest.UserId)
            {
				CloseCallRequest();
                await InvokeAsync(StateHasChanged);
            }
        });
    }


    private async Task<Group?> GetGroup(int groupId)
    {
        if (string.IsNullOrEmpty(token)) return null;
        else return await ChatApiService.GetGroupAsync(groupId, token);
    }


    private async Task<Contact?> GetContact(int contactId)
    {
        if (string.IsNullOrEmpty(token)) return null;
        else return await ChatApiService.GetContactAsync(contactId, token);
    }



    private async Task ExitUserPage()
    {
        await hubConnection.DisposeAsync();
        await OnLogout.InvokeAsync();
    }


    private async Task HandleGroupSelected(Group group)
    {
        Console.Beep();
        selectedGroupId = group.Id;
        selectedContactId = 0;
        selectedGroup = await GetGroup(selectedGroupId);
        if (selectedGroup == null)
        {
            await ExitUserPage();
            return;
        }
        isGroupOpened = true;
        isChatOpened = true;
        selectedContact = null;
        await InvokeAsync(StateHasChanged);
    }


    private async void HandleContactSelected(Contact contact)
    {
        Console.Beep();
        selectedContactId = contact.Id;
        selectedGroupId = 0;
        selectedContact = await GetContact(contact.AssociatedUserId);
        if (selectedContact == null)
        {
            await ExitUserPage();
            return;
        }
        isGroupOpened = false;
        isChatOpened = true;
        selectedGroup = null;
        await InvokeAsync(StateHasChanged);
    }


    private async Task SendMessage(MessageStorageDto messageStorageDto)
    {

        if (messageStorageDto.Id == 0) messageStorageDto = await MessageRepository.AddMessage(messageStorageDto);

        Message? message = await ChatApiService.CreateMessageAsync(messageStorageDto, messageStorageDto.Files, token);
        await MessageRepository.RemoveMessage(messageStorageDto.Id);

        if (hubConnection.State == HubConnectionState.Connected && message != null)
        {
            await hubConnection.SendAsync("SendMessage", message);

            if (selectedGroup != null && selectedGroup.ChatId == message.ChatId)
            {
                Message? updatedMessage = selectedGroup.Chat.Messages.FirstOrDefault(m => m.UserId == message.UserId && m.Content.Equals(message.Content) && m.ChatId == message.ChatId);
                if (updatedMessage != null) selectedGroup.Chat.Messages.Remove(updatedMessage);
                selectedGroup.Chat.Messages.Add(message);
                await InvokeAsync(StateHasChanged);
            }
            else if (selectedContact != null && selectedContact.ChatId == message.ChatId)
            {
                Message? updatedMessage = selectedContact.Chat.Messages.FirstOrDefault(m => m.UserId == message.UserId && m.Content.Equals(message.Content) && m.ChatId == message.ChatId);
                if (updatedMessage != null) selectedContact.Chat.Messages.Remove(updatedMessage);
                selectedContact.Chat.Messages.Add(message);
                await InvokeAsync(StateHasChanged);
            }
        }
        else return;
    }


    public async Task DownloadFile(DownloadFileRequestDto downloadFileDto)
    {
        DownloadFileResponseDto? downloadFileResponseDto = await ChatApiService.DownLoadFileAsync(downloadFileDto.FileName, downloadFileDto.MessageId, downloadFileDto.DocumentId, token);

        if (downloadFileResponseDto == null) return;

        await JSRuntime.InvokeVoidAsync(
           "blazorDownloadFile",
           downloadFileResponseDto.FileName,
           downloadFileResponseDto.ContentType,
           Convert.ToBase64String(downloadFileResponseDto.File)
        );
    }

    public async Task CallUser(int callerUserId)
    {
        if (!isCalling)
        {
            isCalling = true;
            string userName = user.Contacts.FirstOrDefault(c => c.AssociatedUserId == callerUserId)?.AssociatedUser.Name ?? string.Empty;
            if (string.IsNullOrEmpty(userName)) return;
            userCall = new CallInfo() { UserId = callerUserId, UserName = userName };
            await hubConnection.SendAsync("CallUser", user.Id, callerUserId);
			await InvokeAsync(StateHasChanged);
        }

    }

    public async Task CallGroup(int chatId)
    {
        if (!isCallingRequest) await hubConnection.SendAsync("CallGroup", chatId, user.ZoomUrl);
    }

    public async Task AcceptCall(CallInfo call)
    {
		CloseCallRequest();
        if (!string.IsNullOrEmpty(call.ZoomUrl)) await Launcher.OpenAsync(call.ZoomUrl);
        else
        {
            await hubConnection.SendAsync("AnswerCall", call.UserId, user.AzureIdentity);
            await Launcher.OpenAsync($"http://localhost:8080?token={user.AzureToken}");
        }
        await InvokeAsync(StateHasChanged);
    }


    public async Task RejectCall(CallInfo call)
    {
		CloseCallRequest();
        if(string.IsNullOrEmpty(call.ZoomUrl)) await hubConnection.SendAsync("RejectCall", user.Id, call.UserId);
        await InvokeAsync(StateHasChanged);
    }

    public async Task CancelCall(CallInfo call)
    {
        await hubConnection.SendAsync("CancelCall", user.Id, call.UserId);
		CloseCalling();
    }


    public void CloseCallRequest()
    {
        isCallingRequest = false;
		callRequest = null;
    }

	public void CloseCalling()
	{
		isCalling = false;
		userCall = null;
	}


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null) await hubConnection.DisposeAsync();
    }
}