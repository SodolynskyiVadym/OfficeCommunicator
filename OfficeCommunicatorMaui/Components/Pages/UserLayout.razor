@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject AuthApiService AuthApiService
@inject ChatApiService ChatApiService
@inject GroupApiService GroupApiService
@inject ContactApiService ContactApiService
@inject MessageRepository MessageRepository
@inject SecureStorageService SecureStorageService
@inject IJSRuntime JSRuntime



@if (user != null)
{
    @if (isCallingRequest)
    {
        <CallRequest Call="callRequest" OnAccept="AcceptCall" OnReject="RejectCall"></CallRequest>
    }
    @if (isCalling)
    {
        <CallingPage Call="userCall" OnCancel="CancelCall"></CallingPage>
    }

    @if (isGroupCreating)
    {
        <GroupCreate OnCreateGroup="CreateGroup"></GroupCreate>
    }

    <div style="display: flex;">
        <div style="width:5%; text-align:center; margin-top: 30px;">
            <img class="img-action" src="images/chat.png" @onclick="OpenChat" />
            <img class="img-action" src="images/add-user.png" @onclick="OpenAddingContact"/>
            <img class="img-action" src="images/add-group.png" @onclick="OpenCreatingGroup" />
            <img class="img-action" src="images/logout.png" @onclick="ExitUserPage" />
        </div>

        @if (isChatOpened)
        {
            <div style="width:20%; text-align:center">
                <NavMenu Groups="user.Groups" Contacts="user.Contacts" OnGroupSelected="HandleGroupSelected" OnContactSelected="HandleContactSelected" />
            </div>
        }


        <div style="width:70%; padding-left:5%">
            @if (isGroupCreating)
            {
                <CreateGroupPage OnCreateGroup="CreateGroup"></CreateGroupPage>
            }


            @if (isAddingContactOpened)
            {
                <AddContactPage Users="users" OnAddContact="CreateContact"></AddContactPage>
            }

            @if (isChatOpened)
            {
                @if (isGroupOpened)
                {
                    <GroupChat Group="selectedGroup" OnAddUser="AddUserToGroup" OnCallGroup="CallGroup" OnDownloadFile="DownloadFile" 
                    OnSendMessage="SendMessage" OnAddAdmin="AddAdmin" Contacts="user.Contacts" UserId="user.Id"
                    OnDeleteDocument="RemoveDocument" OnDeleteMessage="RemoveMessage" OnUpdateMessage="UpdateMessage" />
                }
                @if (isContactOpened)
                {
                    <ContactChat Contact="selectedContact" UserId="user.Id" OnCallUser="CallUser" OnDownloadFile="DownloadFile" 
                    OnSendMessage="SendMessage" OnDeleteDocument="RemoveDocument" OnDeleteMessage="RemoveMessage" OnUpdateMessage="UpdateMessage" />
                }
            }
        </div>

    </div>
}


@code {
    [Parameter]
    public EventCallback OnLogout { get; set; }


    private bool isChatOpened { get; set; } = true;
    private bool isGroupOpened { get; set; }
    private bool isContactOpened {get;set ; }
    private bool isGroupCreating { get; set; }
    private bool isAddingContactOpened { get; set; }
    private bool isCallingRequest { get; set; }
    private bool isCalling { get; set; }

    private int selectedGroupId { get; set; }
    private int selectedContactId { get; set; }

    private Group? selectedGroup { get; set; }
    private Contact? selectedContact { get; set; }
    private CallInfo? callRequest { get; set; }
    private CallInfo? userCall { get; set; }

    private readonly string serverUrl = "http://localhost:5207/chatHub";
    private string token { get; set; } = string.Empty;

    private User user { get; set; }
    private List<User> users { get; set; } = new List<User>();
    private HubConnection hubConnection { get; set; }

    protected override async Task OnInitializedAsync()
    {
        token = await SecureStorageService.GetTokenAsync() ?? string.Empty;
        if (string.IsNullOrEmpty(token))
        {
            await OnLogout.InvokeAsync();
            return;
        }


        var userResponse = await AuthApiService.GetUserAsync(token);
        if (!userResponse.IsSuccess || userResponse.Data == null)
        {
            await OnLogout.InvokeAsync();
            return;
        }
        else user = userResponse.Data;



        hubConnection = new HubConnectionBuilder()
            .WithUrl(serverUrl, options =>
            {
                options.AccessTokenProvider = () => Task.FromResult<string?>(token);
            })
        .Build();
        await hubConnection.StartAsync();

        if (hubConnection.State != HubConnectionState.Connected)
        {
            await OnLogout.InvokeAsync();
            return;
        }



        var unsavedMessages = await MessageRepository.GetUnsentMessagesAsync();
        foreach (var message in unsavedMessages)
        {
            if (message.UserId == user.Id) await SendMessage(message);
        };



        hubConnection.On<Message>("ReceiveMessage", async (message) =>
        {
            if(selectedGroup == null || (selectedGroup.ChatId != message.ChatId))
            {
                Group? group = user.Groups.FirstOrDefault(g => g.ChatId == message.ChatId);
                if (group != null)
                {
                    group.UnviewedMessages++;
                    await InvokeAsync(StateHasChanged);
                }
            }

            if (selectedContact == null || (selectedContact.ChatId != message.ChatId))
            {
                Contact? contact = user.Contacts.FirstOrDefault(g => g.ChatId == message.ChatId);
                if (contact != null)
                {
                    contact.UnviewedMessages++;
                    await InvokeAsync(StateHasChanged);
                }
            }

            if (selectedGroup != null && selectedGroup.ChatId == message.ChatId)
            {
                selectedGroup.Chat.Messages.Add(message);
                await InvokeAsync(StateHasChanged);
            }

            else if (selectedContact != null && selectedContact.ChatId == message.ChatId)
            {
                selectedContact.Chat.Messages.Add(message);
                await InvokeAsync(StateHasChanged);
            }
        });


        hubConnection.On<int, int>("OnRemoveMessage", async (chatId, messageId) =>
        {
            if(selectedContact != null && selectedContact.ChatId == chatId)
            {
                Message? message = selectedContact.Chat.Messages.FirstOrDefault(m => m.Id == messageId);
                if (message != null)
                {
                    selectedContact.Chat.Messages.Remove(message);
                    await InvokeAsync(StateHasChanged);
                }
            }
            else if (selectedGroup != null && selectedGroup.ChatId == chatId)
            {
                Message? message = selectedGroup.Chat.Messages.FirstOrDefault(m => m.Id == messageId);
                if (message != null)
                {
                    selectedGroup.Chat.Messages.Remove(message);
                    await InvokeAsync(StateHasChanged);
                }
            }
        });



        hubConnection.On<Message>("OnUpdateMessage", async (message) =>
        {
            if (selectedContact != null && selectedContact.ChatId == message.ChatId)
            {
                Message? messageOld = selectedContact.Chat.Messages.FirstOrDefault(m => m.Id == message.Id);
                if (messageOld != null)
                {
                    selectedContact.Chat.Messages.Remove(messageOld);
                    selectedContact.Chat.Messages.Add(message);
                    selectedContact.Chat.Messages = selectedContact.Chat.Messages.OrderBy(m => m.Date).ToList();
                    await InvokeAsync(StateHasChanged);
                }
            }
            else if (selectedGroup != null && selectedGroup.ChatId == message.ChatId)
            {
                Message? messageOld = selectedGroup.Chat.Messages.FirstOrDefault(m => m.Id == message.Id);
                if (messageOld != null)
                {
                    selectedGroup.Chat.Messages.Remove(messageOld);
                    selectedGroup.Chat.Messages.Add(message);
                    selectedGroup.Chat.Messages = selectedGroup.Chat.Messages.OrderBy(m => m.Date).ToList();
                    await InvokeAsync(StateHasChanged);
                }
            }
        });


        hubConnection.On<int, int, int>("OnDeleteDocument", async (documentId, messageId, chatId) =>
        {
            await JSRuntime.InvokeVoidAsync("printData", documentId, messageId, chatId);
            if (selectedContact != null && selectedContact.ChatId == chatId)
            {
                Message? message = selectedContact.Chat.Messages.FirstOrDefault(m => m.Id == messageId);
                if (message != null)
                {
                    selectedContact.Chat.Messages.Remove(message);
                    message.Documents.RemoveAll(d => d.Id == documentId);
                    selectedContact.Chat.Messages.Add(message);
                    await InvokeAsync(StateHasChanged);
                }
            }

            else if (selectedGroup != null && selectedGroup.ChatId == chatId)
            {
                Message? message = selectedGroup.Chat.Messages.FirstOrDefault(m => m.Id == messageId);
                if (message != null)
                {
                    selectedGroup.Chat.Messages.Remove(message);
                    message.Documents.RemoveAll(d => d.Id == documentId);
                    selectedGroup.Chat.Messages.Add(message);
                    await InvokeAsync(StateHasChanged);
                }
            }
        });


        hubConnection.On<Contact>("ReceiveContact", async (contact) =>
        {
            await hubConnection.SendAsync("SubscribeContact", contact.Id);
            user.Contacts.Add(contact);
            await InvokeAsync(StateHasChanged);
        });


        hubConnection.On<int>("ReceiveUserCall", async (userId) =>
        {
            if (isCallingRequest) return;

            Contact? contact = user.Contacts.FirstOrDefault(c => c.AssociatedUserId == userId);
            if (contact == null) return;

            callRequest = new CallInfo()
            {
				UserId = userId,
                UniqueName = contact.AssociatedUser.UniqueName,
                UserName = contact.AssociatedUser.Name
            };
            isCallingRequest = true;
            await InvokeAsync(StateHasChanged);
        });


        hubConnection.On<int, string>("ReceiveGroupCall", async (chatId, zoomUrl) =>
        {
            if (isCallingRequest) return;
            string? groupName = user.Groups.FirstOrDefault(g => g.ChatId == chatId)?.Name;
            if (string.IsNullOrEmpty(groupName)) return;

            callRequest = new CallInfo() { GroupName = groupName, ZoomUrl = zoomUrl};

            isCallingRequest = true;
            await InvokeAsync(StateHasChanged);
        });


        hubConnection.On<int>("RejectAnswer", async (userId) =>
        {
            if (callRequest != null && callRequest.UserId != userId) return;
            CloseCalling();
            await InvokeAsync(StateHasChanged);
        });


        hubConnection.On<string>("ReceiveAnswer", async (identity) =>
        {
            CloseCalling();
            await InvokeAsync(StateHasChanged);
            await Launcher.OpenAsync($"http://localhost:8080?callerUserId={identity}&token={user.AzureToken}");
        });


        hubConnection.On<int>("OnCancelCall", async (userId) =>
        {
            if (callRequest != null && userId == callRequest.UserId)
            {
                CloseCallRequest();
                await InvokeAsync(StateHasChanged);
            }
        });


        hubConnection.On<User>("OnAddUserToChat", async (user) =>
        {
            if (selectedGroup != null)
            {
                selectedGroup.Users.Append(user);
                await InvokeAsync(StateHasChanged);
            }
        });


        hubConnection.On<Group>("OnAddGroup", async (group) =>
        {
            user.Groups.Add(group);
            await hubConnection.SendAsync("SubscribeChat", group.ChatId);
            await InvokeAsync(StateHasChanged);
        });


        hubConnection.On<int, int>("OnRemoveUserFromChat", async (userId, groupId) =>
        {
            if (selectedGroup != null && selectedGroup.Id == groupId)
            {
                User? user = selectedGroup.Users.FirstOrDefault(u => u.Id == userId);
                if (user != null)
                {
                    selectedGroup.Users.Remove(user);
                    selectedGroup.Admins.Remove(user);
                    await InvokeAsync(StateHasChanged);
                }
            }
        });


        hubConnection.On<int>("OnRemoveChat", async (chatId) =>
        {
            if (selectedGroup != null && selectedGroup.ChatId == chatId)
            {
                isGroupOpened = false;
                selectedGroup = null;
                user.Groups.RemoveAll(g => g.ChatId == chatId);
                await InvokeAsync(StateHasChanged);
            }
            else if (selectedGroup != null && selectedGroup.ChatId != chatId)
            {
                user.Groups.RemoveAll(g => g.ChatId == chatId);
                await InvokeAsync(StateHasChanged);
            }
            else if (selectedContact != null && selectedContact.ChatId == chatId)
            {
                isContactOpened = false;
                selectedContact = null;
                user.Contacts.RemoveAll(c => c.ChatId == chatId);
                await InvokeAsync(StateHasChanged);
            }
            else if (selectedContact != null && selectedContact.ChatId != chatId)
            {
                user.Contacts.RemoveAll(c => c.ChatId == chatId);
                await InvokeAsync(StateHasChanged);
            }
            await hubConnection.SendAsync("UnsubscribeChat", chatId);
        });
    }



    private async Task ExitUserPage()
    {
        await hubConnection.DisposeAsync();
        await OnLogout.InvokeAsync();
    }


    private async Task HandleGroupSelected(Group group)
    {
        selectedGroupId = group.Id;
        selectedContactId = 0;

        selectedGroup = await ChatApiService.GetGroupAsync(selectedGroupId, token);
        group.UnviewedMessages = 0;

        if (selectedGroup == null)
        {
            await ExitUserPage();
            return;
        }
        isContactOpened = false;
        isGroupOpened = true;
        isChatOpened = true;
        selectedContact = null;
        await InvokeAsync(StateHasChanged);
    }


    private async Task HandleContactSelected(Contact contact)
    {
        selectedContactId = contact.Id;
        selectedGroupId = 0;

        selectedContact = await ChatApiService.GetContactAsync(contact.AssociatedUserId, token);
        contact.UnviewedMessages = 0;

        if (selectedContact == null)
        {
            await ExitUserPage();
            return;
        }
        isGroupOpened = false;
        isContactOpened = true;
        isChatOpened = true;
        selectedGroup = null;
        await InvokeAsync(StateHasChanged);
    }


    private async Task CreateGroup(GroupCreateDto groupCreate)
    {
        Group? group = await GroupApiService.CreateGroupAsync(groupCreate, token);
        if (group != null)
        {
            user.Groups.Add(group);
            await HandleGroupSelected(group);
            await OpenChat();
            await InvokeAsync(StateHasChanged);
        }
    }


    private async Task CreateContact(int userId)
    {
        Contact? contact = await ContactApiService.CreateContactAsync(userId, token);
        if (contact != null)
        {
            user.Contacts.Add(contact);
            await HandleContactSelected(contact);
            await OpenChat();
            await InvokeAsync(StateHasChanged);
        }
    }


    private async Task SendMessage(MessageStorageDto messageStorageDto)
    {

        if (messageStorageDto.Id == 0) messageStorageDto = await MessageRepository.AddMessage(messageStorageDto);

        Message? message = await ChatApiService.CreateMessageAsync(messageStorageDto, messageStorageDto.Files, token);

        await MessageRepository.RemoveMessage(messageStorageDto.Id);

        if (hubConnection.State == HubConnectionState.Connected && message != null)
        {
            await hubConnection.SendAsync("SendMessage", message);

            if (selectedGroup != null && selectedGroup.ChatId == message.ChatId)
            {
                Message? updatedMessage = selectedGroup.Chat.Messages
                    .Where(m => m.UserId == message.UserId && m.Content.Equals(message.Content) && m.ChatId == message.ChatId)
                    .OrderByDescending(m => m.Date)
                    .FirstOrDefault();
                if (updatedMessage != null) selectedGroup.Chat.Messages.Remove(updatedMessage);
                selectedGroup.Chat.Messages.Add(message);
                await InvokeAsync(StateHasChanged);
            }
            else if (selectedContact != null && selectedContact.ChatId == message.ChatId)
            {
                Message? updatedMessage = selectedContact.Chat.Messages
                    .Where(m => m.UserId == message.UserId && m.Content.Equals(message.Content) && m.ChatId == message.ChatId)
                    .OrderByDescending(m => m.Date)
                    .FirstOrDefault();
                if (updatedMessage != null) selectedContact.Chat.Messages.Remove(updatedMessage);
                selectedContact.Chat.Messages.Add(message);
                await InvokeAsync(StateHasChanged);
            }
        }
        else return;
    }

    private async Task UpdateMessage(MessageStorageDto documentMessageChatId)
    {
        Message? message = await ChatApiService.UpdateMessageAsync(documentMessageChatId, token);
        if (message != null) await hubConnection.SendAsync("UpdateMessage", message);
    }


    private async Task RemoveMessage(DocumentMessageChatId documentMessageChatId)
    {
        bool result = await ChatApiService.DeleteMessageAsync(documentMessageChatId.MessageId, token);
        if (result) await hubConnection.SendAsync("RemoveMessage", documentMessageChatId.ChatId, documentMessageChatId.MessageId);
    }


    private async Task RemoveDocument(DocumentMessageChatId documentMessageChatId)
    {
        bool result = await ChatApiService.DeleteDocumentAsync(documentMessageChatId.DocumentId, token);
        if (result) await hubConnection.SendAsync("DeleteDocument", documentMessageChatId.DocumentId, documentMessageChatId.MessageId, documentMessageChatId.ChatId);
    }



    public async Task AddUserToGroup(int userId)
    {
        if(selectedGroup != null)
        {
            User? user = await GroupApiService.AddUserToChatAsync(userId, selectedGroup.Id, token);
            if (user != null) await hubConnection.SendAsync("AddUserToChat", user, selectedGroup);
        }
    }


	public async Task AddAdmin(int userId)
	{
		if (selectedGroup != null)
		{
			await GroupApiService.AddAdminAsync(userId, selectedGroup.Id, token);
		}
	}


    public async Task DownloadFile(DownloadFileRequestDto downloadFileDto)
    {
        DownloadFileResponseDto? downloadFileResponseDto = await ChatApiService.DownLoadFileAsync(downloadFileDto.FileName, downloadFileDto.MessageId, downloadFileDto.DocumentId, token);

        if (downloadFileResponseDto == null) return;

        await JSRuntime.InvokeVoidAsync(
           "blazorDownloadFile",
           downloadFileResponseDto.FileName,
           downloadFileResponseDto.ContentType,
           Convert.ToBase64String(downloadFileResponseDto.File)
        );
    }


    public async Task CallUser(int callerUserId)
    {
        if (!isCalling)
        {
            isCalling = true;
            string userName = user.Contacts.FirstOrDefault(c => c.AssociatedUserId == callerUserId)?.AssociatedUser.Name ?? string.Empty;
            if (string.IsNullOrEmpty(userName)) return;
            userCall = new CallInfo() { UserId = callerUserId, UserName = userName };
            await hubConnection.SendAsync("CallUser", user.Id, callerUserId);
            await InvokeAsync(StateHasChanged);
        }

    }


    public async Task CallGroup(int chatId)
    {
        if (!isCallingRequest) await hubConnection.SendAsync("CallGroup", chatId, user.ZoomUrl);
    }



    public async Task AcceptCall(CallInfo call)
    {
        CloseCallRequest();
        if (!string.IsNullOrEmpty(call.ZoomUrl)) await Launcher.OpenAsync(call.ZoomUrl);
        else
        {
            await hubConnection.SendAsync("AnswerCall", call.UserId, user.AzureIdentity);
            await Launcher.OpenAsync($"http://localhost:8080?token={user.AzureToken}");
        }
        await InvokeAsync(StateHasChanged);
    }


    public async Task RejectCall(CallInfo call)
    {
        CloseCallRequest();
        if(string.IsNullOrEmpty(call.ZoomUrl)) await hubConnection.SendAsync("RejectCall", user.Id, call.UserId);
        await InvokeAsync(StateHasChanged);
    }



    public async Task CancelCall(CallInfo call)
    {
        await hubConnection.SendAsync("CancelCall", user.Id, call.UserId);
        CloseCalling();
    }


    public void CloseCallRequest()
    {
        isCallingRequest = false;
        callRequest = null;
    }



    public void CloseCalling()
    {
        isCalling = false;
        userCall = null;
    }


    public async Task OpenCreatingGroup()
    {
        isAddingContactOpened = false;
        isChatOpened = false;
        isGroupCreating = true;
        await InvokeAsync(StateHasChanged);
    }


    public async Task OpenAddingContact()
    {
        users = await AuthApiService.GetUsersAsync();
        if (users == null) return;
		users.RemoveAll(u => user.Contacts.Any(c => c.AssociatedUserId == u.Id) || u.Id == user.Id);

        isAddingContactOpened = true;
        isChatOpened = false;
        isGroupCreating = false;
        await InvokeAsync(StateHasChanged);
    }


    public async Task OpenChat()
    {
        isAddingContactOpened = false;
        isChatOpened = true;
        isGroupCreating = false;
        await InvokeAsync(StateHasChanged);
    }


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null) await hubConnection.DisposeAsync();
    }
}