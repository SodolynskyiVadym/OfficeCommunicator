@page "/chat"

@using Microsoft.AspNetCore.SignalR.Client
@using OfficeCommunicatorMAUI.Services
@inject SignalRService SignalRService

<h3>Chat</h3>

@if (!IsConnected)
{
    <button @onclick="CreateList">Create List</button>
    <input @bind="ListId" placeholder="Enter List Id" />
    <button @onclick="JoinList">Join List</button>
}
else
{
    <h1>Connected to List: @ListId</h1>
    <input @bind="Item" placeholder="Enter your message" />
    <button @onclick="AddItem">Send</button>
}

<ul>
    @foreach (var message in Messages)
    {
        <li>@message</li>
        <button @onclick="() => RemoveItem(message)">Remove</button>
    }
</ul>

@code {
    private string Item { get; set; } = string.Empty;
    private string ListId { get; set; }
    private bool IsConnected { get; set; }
    private List<string> Messages { get; set; } = new();
    private HubConnection HubConnection { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string serverUrl = "http://localhost:5207/chatHub";
        HubConnection = new HubConnectionBuilder()
            .WithUrl(serverUrl)
            .Build();
        await HubConnection.StartAsync();
        HubConnection.On<List<string>>("ReceiveShoppingList", (list) =>
        {
            Console.Beep();
            Messages = list;
			InvokeAsync(StateHasChanged);
        });

        HubConnection.On<string, List<string>>("JoinShoppingList", (listId, list) =>
        {
            Console.Beep();
            ListId = listId;
            Messages = list;
            IsConnected = true;
            InvokeAsync(StateHasChanged);
        });

        HubConnection.On<string>("ShoppingListCreated", (listId) =>
        {
            Console.Beep();
            ListId = listId;
            IsConnected = true;
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task AddItem()
    {
        await HubConnection.InvokeAsync("AddItem", ListId, Item);
        Messages.Add(Item);
        Item = string.Empty;
        InvokeAsync(StateHasChanged);
    }

    private async Task RemoveItem(string message)
    {
        Messages.Remove(message);
        await HubConnection.InvokeAsync("RemoveItem", ListId, message);
		InvokeAsync(StateHasChanged);
    }

    private async Task JoinList()
    {
        await HubConnection.InvokeAsync("JoinShoppingList", ListId);
    }

    private async Task CreateList()
    {
        await HubConnection.InvokeAsync("CreateShoppingList");
    }
}
