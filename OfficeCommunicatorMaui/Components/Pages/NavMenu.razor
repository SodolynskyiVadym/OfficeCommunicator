<input type="text" class="search-field" @bind="SearchText" />

<div class="list">
    @foreach (var group in FilteredGroups)
    {
            <div class="list-item" @onclick="() => OnGroupSelected.InvokeAsync(group)">
                <img src="images/group.png" />
                <div>@group.Name</div>
                <div>@group.UnviewedMessages</div>
				<div>@DateTime.Now.ToString("HH:mm")</div>
            </div>
    }
    @foreach (var contact in FilteredContacts)
    {
            <div class="list-item" @onclick="() => OnContactSelected.InvokeAsync(contact)">
                <img src="images/contact.png" />
                <div>@contact.AssociatedUser.Name</div>
                <div>@contact.UnviewedMessages</div>
                <div>@DateTime.Now.ToString("HH:mm")</div>
            </div>
    }
</div>

@code {
    [Parameter]
    public List<Group> Groups { get; set; } = new List<Group>();

    [Parameter]
    public List<Contact> Contacts { get; set; } = new List<Contact>();

    [Parameter]
    public EventCallback<Group> OnGroupSelected { get; set; }

    [Parameter]
    public EventCallback<Contact> OnContactSelected { get; set; }

    public List<Group> FilteredGroups { get; set; } = new List<Group>();
    public List<Contact> FilteredContacts { get; set; } = new List<Contact>();

    protected override Task OnInitializedAsync()
    {
        FilteredGroups = Groups;
        FilteredContacts = Contacts;
        return Task.CompletedTask;
    }

    private string _searchText;
    public string SearchText
    {
        get => _searchText;
        set
        {
            if (_searchText != value)
            {
                _searchText = value;
                Search();
            }
        }
    }

    private void Search()
    {
        FilteredContacts = Contacts.Where(c => c.AssociatedUser.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase)).ToList();
        FilteredGroups = Groups.Where(g => g.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase)).ToList();
    }
}
